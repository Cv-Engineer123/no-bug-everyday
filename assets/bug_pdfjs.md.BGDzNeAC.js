import{_ as s,c as a,o as i,l as p}from"./chunks/framework.BxrWhBXs.js";const g=JSON.parse('{"title":"pdf.js踩坑(基于webpack下的pdfjs-dist库)","description":"","frontmatter":{},"headers":[],"relativePath":"bug/pdfjs.md","filePath":"bug/pdfjs.md"}'),n={name:"bug/pdfjs.md"},t=p(`<h1 id="pdf-js踩坑-基于webpack下的pdfjs-dist库" tabindex="-1">pdf.js踩坑(基于webpack下的pdfjs-dist库) <a class="header-anchor" href="#pdf-js踩坑-基于webpack下的pdfjs-dist库" aria-label="Permalink to &quot;pdf.js踩坑(基于webpack下的pdfjs-dist库)&quot;">​</a></h1><p>最近项目有预览pdf文件的一个需求，目前比较常用的pdf预览库是Mozilla基金会主导的pdf.js, pdfjs-dist则是pdf.js的模块化实现，这里使用的版本为最新版本2.14.305，这几个比较新的版本带有typescript类型提示，用的更为方便一些</p><hr><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>  npm i pdfjs-dist -S</span></span></code></pre></div><p>安装完成后 在组件内导入</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getDocument } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pdfjs-dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在组件中调用</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url地址&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>保存后查看效果，这时候出现了一个报错</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Module parse failed: Unexpected character &#39;#&#39; (1387:9)</span></span>
<span class="line"><span>You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span></span>
<span class="line"><span>| </span></span>
<span class="line"><span>| class PDFDocumentLoadingTask {</span></span>
<span class="line"><span>&gt;   static #docId = 0;</span></span>
<span class="line"><span>| </span></span>
<span class="line"><span>|   constructor() {</span></span></code></pre></div><p>由报错箭头指示可知，webpack无法识别并构建ECMA的新特性（private符号），而这个库的作者竟然不愿意用babel转化 一遍直接就丢了出来让用户自己解决。因此需要手动为其配置一遍babel</p><p>由于我的开发环境是基于Vue-cli3的环境下搭建，因此在vue.config.js中配置，正常webpack环境下则配置webpack.config.ts</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  chainWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pdfjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">pdf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>配置vue.config.js中的chainWebpack属性进行链式调用,将pdf.js文件使用babel-loader进行转化,这里的test我直接使用了文件名精准匹配， 也可以自己以其他方式填写规则，保存后重新启动就可以正常使用了</p>`,14),e=[t];function l(h,k,d,c,r,E){return i(),a("div",null,e)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
